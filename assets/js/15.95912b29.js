(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{379:function(t,s,r){"use strict";r.r(s);var a=r(8),o=Object(a.a)({},(function(){var t=this,s=t.$createElement,r=t._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"_16-github-actions-的-workflow-設定檔解析-1"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_16-github-actions-的-workflow-設定檔解析-1"}},[t._v("#")]),t._v(" 16. GitHub Actions 的 Workflow 設定檔解析（1）")]),t._v(" "),r("h1",{attrs:{id:"github-actions-的-workflow-設定檔解析-1"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#github-actions-的-workflow-設定檔解析-1"}},[t._v("#")]),t._v(" GitHub Actions 的 Workflow 設定檔解析（1）")]),t._v(" "),r("p",[t._v("在上一篇文章中，我分享了一個 GitHub Actions 的腳本，今天就來分析一下這個腳本的結構來看看吧！")]),t._v(" "),r("p",[t._v("不過首先應該要先理解 YAML 文件撰寫格式，如果對 YAML 不了解的話可以先看看 "),r("a",{attrs:{href:"https://zh.wikipedia.org/wiki/YAML",target:"_blank",rel:"noopener noreferrer"}},[t._v("YAML - 維基百科，自由的百科全書"),r("OutboundLink")],1),t._v(" ，有個基本認知之後再回來繼續。")]),t._v(" "),r("hr"),t._v(" "),r("h2",{attrs:{id:"workflow-的名稱與觸發條件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#workflow-的名稱與觸發條件"}},[t._v("#")]),t._v(" Workflow 的名稱與觸發條件")]),t._v(" "),r("div",{staticClass:"language-jsx extra-class"},[r("pre",{pre:!0,attrs:{class:"language-jsx"}},[r("code",[t._v("name"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Deploy gh"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("pages\n\non"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  push"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    branches"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" master\njobs"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  build"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n")])])]),r("p",[t._v("可以看到我先設置了 "),r("code",[t._v("name")]),t._v(" 的這個屬性，這個屬性是在定義目前這個 Workflow 腳本的名稱，因為在專案複雜度較高的情況，也許會需要設置許多不同的 Workflow ，這時候有一個易懂的命名，才能讓你在 GitBub 上管理時能清楚的區分。")]),t._v(" "),r("p",[t._v("再來就是 "),r("code",[t._v("on")]),t._v(" 這個屬性則是定義了執行這個腳本的「執行條件」，我們並不需要在每次程式有所變更的時候都運行腳本，所以需要進行一個明確的條件定義，在我的範例中條件就是 "),r("code",[t._v("push")]),t._v(" 程式碼到 GitHub 時，如果是推送 master 這個分支的情況，才會啟動這個 Workflow 運作腳本。")]),t._v(" "),r("hr"),t._v(" "),r("h2",{attrs:{id:"jobs-確切執行的動作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jobs-確切執行的動作"}},[t._v("#")]),t._v(" "),r("code",[t._v("jobs")]),t._v(" 確切執行的動作")]),t._v(" "),r("p",[t._v("所有不同的工作流都會寫在 "),r("code",[t._v("jobs")]),t._v(" 當中，其實是可以將編譯、測試、部署等等的工作各自寫成不同的工作流。")]),t._v(" "),r("p",[t._v("不過在我的範例中因為專案相當單純，網站樣式等等目前也是使用已完成開發的主題，所以網站專案的本體其實主要都是 "),r("code",[t._v(".md")]),t._v(" 等內容，我認為也沒有必要在發表新文章、新消息等文件增減的狀況下安排測試，因此工作流就簡化成一組 "),r("code",[t._v("build")]),t._v(" 囉。")]),t._v(" "),r("p",[t._v("而關於 "),r("code",[t._v("jobs")]),t._v(" 的解析，就留到下一篇吧。")])])}),[],!1,null,null,null);s.default=o.exports}}]);